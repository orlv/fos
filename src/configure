#!/bin/bash
echo -n "Checking for BSD "
if uname | grep BSD; then
	echo yes
	ECHO="/bin/echo";
	MAKE="gmake"
	GREEN=
	YELLOW=
	RED=
	GREY=
else
	echo no
	ECHO="/bin/echo -e";
	MAKE="make"

	## ansi colors:
	GREEN="/bin/echo -en \"\033[0;32;40m\" ;"
	YELLOW="/bin/echo -en \"\033[1;33;40m\" ;" 
	RED="/bin/echo -en \"\033[0;38;40m\" ;"
	GREY="/bin/echo -en \"\033[1;37;40m\" ;" 
fi
echo -n "Checking for top directory "

TOPDIR=$(cd ..; pwd)

echo $TOPDIR

XCFLAGS=
XLDFLAGS=
echo -n "Checking for gcc version "

GCCVER=$( gcc --version 2>/dev/null | head -n 1 | cut -d ' ' -f 3 | cut -d '.' -f 1  )

if case $GCCVER in
	"4" )
		echo "4.x.x"
		XCFLAGS+="-fno-stack-protector "
		false
		;;
	"3" )
		echo "3.x.x"
		false
		;;

esac; then
	echo "unknown or not found"
	exit 1;
fi

echo -n "Checking for platform flags "

if case $(uname -m) in
	"x86_64" )
		echo "i386 compability"
		XLDFLAGS+="-melf_i386 "
		XCFLAGS+="-m32 "
		false
		;;
esac; then
	echo "none needed"
fi


echo Creating platform report
cat > platform <<EOF
Platform report (automatically generated by configure).
Generated at:
	$(date)
Kernel and hardware info:
	$(uname -srmp)
GCC version:
	$(gcc --version | head -n 1)
LD (binutils) version:
	$(ld --version | head -n 1)
Shell version:
	$(sh --version | head -n 1)
Make version:
	$(make --version | head -n 1)
Extended CFLAGS:
	$XCFLAGS
Extended LDFLAGS:
	$XLDFLAGS
Top directory:
	$TOPDIR
System locale:
	$LANG
EOF

echo Creating config.mk
cat > config.mk <<EOF
# -----------------------------------------------------------------------------
# Automatically generated, do not edit!
# Copyright (C) 2007 Oleg Fedorov
# -----------------------------------------------------------------------------
SYSTEM_NAME     = FOS
SYSTEM_ROOT	= $TOPDIR
SYSTEM_SRC	= $TOPDIR/src
BINDIR		= $TOPDIR/boot/modules
KERNEL_PATHNAME	= $TOPDIR/boot/fos
INCLUDE		= $TOPDIR/include
LIB		= $TOPDIR/lib

MAKE		= $MAKE
ECHO		= $ECHO

# output coloring:
GREEN		= $GREEN
YELLOW		= $YELLOW
RED		= $RED
GREY		= $GREY

# -- Modules ------------------------------------------------------------------
GRUB_MODULES =	/boot/modules/int16b		\\
		/boot/modules/namer		\\
		/boot/modules/init		\\
		/boot/modules/int16b		\\
		/boot/modules/tty		\\
		/boot/modules/stty		\\
		/boot/modules/romfs		\\
		/boot/modules/initrd.gz

GRUB_MENU    = $TOPDIR/boot/grub/menu.lst
GRUB_TFTP_MENU = $TOPDIR/boot/grub/tftpmenu.lst
GRUB_TIMEOUT = 0
GRUB_TITLE   = FOS - FOS is Operating System
GRUB_ROOT    = cd0
GRUB_KERNEL  = /boot/fos

# -- User Programms -----------------------------------------------------------
# Базовый адрес пользовательских программ
USER_MEM_BASE = 0x8000000
# -----------------------------------------------------------------------------
EOF
echo Creating usermode/config.mk

cat > usermode/config.mk <<EOF
# -----------------------------------------------------------------------------
# Automatically generated, do not edit!
# Copyright (C) 2007 Oleg Fedorov
# -----------------------------------------------------------------------------
CC = gcc
C++ = gcc
AS = gcc
LD = ld
AR = ar
MAKE = $MAKE
ECHO = $ECHO

# output coloring:
GREEN		= $GREEN
YELLOW		= $YELLOW
RED		= $RED
GREY		= $GREY

#----------------------------------------------------------------------------#

SYSTEM_NAME     = FOS
SYSTEM_ROOT	= $TOPDIR
SYSTEM_SRC	= $TOPDIR/src
BINDIR		= $TOPDIR/boot/modules
INSTALLDIR	= $TOPDIR/boot/modules
INITRDDIR	= $TOPDIR/src/initrd/contents
INCLUDE		= $TOPDIR/include
LIB		= $TOPDIR/lib
#DEBUG		= -g
FLAGS		= -Wall -nostdlib -nostdinc -I\$(INCLUDE) -fno-stack-protector -O2 $DEBUG -pipe $XCFLAGS

ASFLAGS		= \$(FLAGS)
CFLAGS		= \$(FLAGS) -ffreestanding -fno-leading-underscore --std=gnu99
CXXFLAGS	= \$(FLAGS) -nostdinc++ -fno-exceptions -fno-use-cxa-atexit -fno-rtti -fno-builtin
LDFLAGS		= -nostdlib -L\$(LIB) $XLDFLAGS
.s.o:
	@echo "Compiling \$<"
	@\$(AS) \$(ASFLAGS) -c -o \$*.o \$<

.S.o:
	@echo "Compiling \$<"
	@\$(AS) \$(CFLAGS) -c -o \$*.o \$<

.c.o:
	@echo "Compiling \$<"
	@\$(CC) \$(CFLAGS) -c -o \$*.o \$<

.cpp.o:
	@echo "Compiling \$<"
	@\$(C++) \$(CXXFLAGS) -c -o \$*.o \$<

# Базовый адрес пользовательских программ
USER_MEM_BASE = 0x8000000
# -----------------------------------------------------------------------------
EOF
echo Creating usermode/servers/config.mk

cat > usermode/servers/config.mk <<EOF
# -----------------------------------------------------------------------------
# Automatically generated, do not edit!
# Copyright (C) 2007 Oleg Fedorov
# -----------------------------------------------------------------------------
CC = gcc
C++ = gcc
AS = gcc
LD = ld
AR = ar
MAKE = $MAKE
ECHO = $ECHO

# output coloring:
GREEN		= $GREEN
YELLOW		= $YELLOW
RED		= $RED
GREY		= $GREY

#----------------------------------------------------------------------------#

SYSTEM_NAME     = FOS
SYSTEM_ROOT	= $TOPDIR
SYSTEM_SRC	= $TOPDIR/src
BINDIR		= $TOPDIR/boot/modules
INSTALLDIR	= $TOPDIR/boot/modules
INITRDDIR	= $TOPDIR/src/initrd/contents
INCLUDE		= $TOPDIR/include
LIB		= $TOPDIR/lib
#DEBUG		= -g
FLAGS		= -Wall -nostdlib -nostdinc -I\$(INCLUDE) -fno-stack-protector -O2 $DEBUG -pipe $XCFLAGS

ASFLAGS		= \$(FLAGS)
CFLAGS		= \$(FLAGS) -ffreestanding -fno-leading-underscore --std=gnu99
CXXFLAGS	= \$(FLAGS) -nostdinc++ -fno-exceptions -fno-use-cxa-atexit -fno-rtti -fno-builtin
LDFLAGS		= -nostdlib -L\$(LIB) $XLDFLAGS
.s.o:
	@echo "Compiling \$<"
	@\$(AS) \$(ASFLAGS) -c -o \$*.o \$<

.S.o:
	@echo "Compiling \$<"
	@\$(AS) \$(CFLAGS) -c -o \$*.o \$<

.c.o:
	@echo "Compiling \$<"
	@\$(CC) \$(CFLAGS) -c -o \$*.o \$<

.cpp.o:
	@echo "Compiling \$<"
	@\$(C++) \$(CXXFLAGS) -c -o \$*.o \$<

# Базовый адрес пользовательских программ
USER_MEM_BASE = 0x8000000
# -----------------------------------------------------------------------------
EOF
echo Creating Makefile
echo "# Automatically generated, do not edit!" | cat - Makefile.in > Makefile

if [ ! -f .platform_report_sent ]; then
	read -p "Do you want to send anonymous platform information to server (this is one-time action) ? [Y/n]" -n 1 PROMPT
	touch .platform_report_sent
	echo
	if [ "$PROMPT" == "" ] || [ "$PROMPT" == "y" ] || [ "$PROMPT" == "Y" ]; then
		echo -n Sending...
		if wget -O /dev/null -o /dev/null http://grindars.org.ru/platform.php --post-file platform; then
			echo Data sent. Thank you!
		else
			echo Error while sending data.
		fi
	fi
fi

